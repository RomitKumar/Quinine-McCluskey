/*
 * @author romit17
 */
package quininemccluskey;

import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import javax.swing.JOptionPane;

public class QMcCluskey extends javax.swing.JFrame {

    /**
     * Creates new form QMcCluskey
     */
    public QMcCluskey() {
        initComponents();
        this.setLocationRelativeTo(null);
        jComboBox2.setSelectedIndex(0);
        jTextField3.requestFocus();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GATE MINIMIZATION USING McCLUSKEY METHOD");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(44, 218, 149));
        jLabel1.setText("GATE MINIMIZATION");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 373, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Σ", "Π" }));
        jComboBox1.setToolTipText("Choose for minterm or maxterm");
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 254, 60, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "f(d)" }));
        jComboBox2.setToolTipText("Choose to include don't care");
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 348, 60, -1));

        jTextField1.setToolTipText("Enter comma separated terms in decimal notation");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 254, 269, -1));

        jTextField2.setToolTipText("Enter comma separated terms in decimal notation");
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 348, 269, -1));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("See your solution here");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 503, 402, -1));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(226, 220, 30));
        jLabel2.setText("Solution :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 464, 194, -1));

        jButton1.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        jButton1.setText("CALCULATE");
        jButton1.setToolTipText("Click to calculate minimized expression");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(268, 418, 201, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 390, 18));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 390, 18));

        jLabel4.setFont(new java.awt.Font("Waree", 2, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 183, 17));
        jLabel4.setText("Number Of Variables");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 124, 166, -1));

        jTextField3.setToolTipText("Enter number of variables in expression");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 162, 166, -1));

        jLabel3.setFont(new java.awt.Font("Waree", 2, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 183, 17));
        jLabel3.setText("Form Of Input Expression");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 216, 200, -1));

        jLabel5.setFont(new java.awt.Font("Waree", 2, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 183, 17));
        jLabel5.setText("Don't Care To Be Included");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 310, 204, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/-wallpaper Plain Light Blue Backgrounds hd wallpaper background.jpg"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextArea1.setText("");
        
        int variable;
        try{
            variable=Integer.parseInt(jTextField3.getText());
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Variable Field Is Empty","Invalid Entry",2);
            return;
        }
        
        String term=jTextField1.getText();
        String dontc=jTextField2.getText();
        int k=0;
        boolean b=false;
        
        int option,var,i,j,m=0;
        
        if(term.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Input Field Is Empty","Invalid Entry",2);
            k=1;
        }
        else if(jComboBox2.getSelectedIndex()==1 && dontc.isEmpty())
        {
            k=JOptionPane.showConfirmDialog(this, "Don't Care Field Is Empty\nDo You Want To Continue", "Empty Field", JOptionPane.YES_NO_OPTION);
            b=true;
        }
        
        if(k==0)
        {
            if(b)
                jComboBox2.setSelectedIndex(0);
            
            if(term.charAt(0)==',' || term.charAt(term.length()-1)==',')
            {
                JOptionPane.showMessageDialog(this, "Terms Cannot Be Null","Invalid Entry",2);
                return;
            }
            if(!dontc.isEmpty() && (dontc.charAt(0)==',' || dontc.charAt(dontc.length()-1)==','))
            {
                JOptionPane.showMessageDialog(this, "Terms Cannot Be Null","Invalid Entry",2);
                return;
            }
            
            String[] t=term.split(",");
            String[] t1;
            if(dontc.isEmpty())
                t1=new String[0];
            else
                t1=dontc.split(",");
            
            option=jComboBox1.getSelectedIndex()==0?1:2;
            
            Set<Integer> tmterm=new HashSet<>();
            Set<Integer> tmdc=new HashSet<>();
            
            try
            {
                for(String tm:t)
               {
                if(tm.isEmpty())
                {
                    JOptionPane.showMessageDialog(this, "Terms Cannot Be Null","Invalid Entry",2);
                    return;
                }
                if(Integer.parseInt(tm.trim())<0)
                {
                    JOptionPane.showMessageDialog(this, "Terms Cannot Be Negative","Invalid Entry",2);
                    return;
                }
                if(!tmterm.add(Integer.parseInt(tm.trim())))
                {
                    JOptionPane.showMessageDialog(this, "Terms Cannot Contain Duplicate Value","Invalid Entry",2);
                    return;
                }
              }
              for(String tm:t1)
              {
                if(tm.isEmpty())
                {
                    JOptionPane.showMessageDialog(this, "Terms Cannot Be Null","Invalid Entry",2);
                    return;
                }
                if(Integer.parseInt(tm.trim())<0)
                {
                    JOptionPane.showMessageDialog(this, "Terms Cannot Be Negative","Invalid Entry",2);
                    return;
                }
                if(!tmterm.add(Integer.parseInt(tm.trim())) || !tmdc.add(Integer.parseInt(tm.trim())))
                {
                    JOptionPane.showMessageDialog(this, "Terms Cannot Contain Duplicate Value","Invalid Entry",2);
                    return;
                }                
              }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Input Is Invalid","Invalid Entry",2);
                return;
            }
            
            int[] a=new int[tmterm.size()]; 
            int[] dca=new int[tmdc.size()];
            
            i=0;
            for(int x:tmterm)
            {
                a[i++]=x;
                m=m<x?x:m;
            }
            i=0;
            for(int x:tmdc)
            {
                dca[i++]=x;
                m=m<x?x:m;
            }
            
            var=getnovar(m);
            if(variable<var)
            {
                JOptionPane.showMessageDialog(this, "Expression Contains Out Of Range Term\n"
                        + "Range Is Defined By Number Of Variables","Invalid Entry",2);
                return;
            }
            Arrays.sort(a); 
            Arrays.sort(dca);
            
           try{
               jTextArea1.setText(solve(a.length, variable, a,option,dca));
           } 
           catch(Exception e){
               JOptionPane.showMessageDialog(this, "Application Encountered Internal Error");
           }
        }     
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        if(jComboBox2.getSelectedIndex()==0)
        {
            jTextField2.setEnabled(false);
            jTextField2.setText("");
        }
        
        if(jComboBox2.getSelectedIndex()==1)
            jTextField2.setEnabled(true);
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            jButton1.doClick();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            jButton1.doClick();
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            jButton1.doClick();
    }//GEN-LAST:event_jTextField3KeyReleased

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
       char c=evt.getKeyChar();
       if(!(c>='0' && c<='9' || c==','))
           evt.consume();
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
         char c=evt.getKeyChar();
         if(!(c>='0' && c<='9' || c==','))
            evt.consume();
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
         char c=evt.getKeyChar();
         if(!(c>='0' && c<='9'))
           evt.consume();
    }//GEN-LAST:event_jTextField3KeyTyped

    
    
    /*****************************************************************************************************/
    /***************************methods for evaluation of minimized expresion*****************************/
    
    static String solve(int n,int var,int[] a,int option,int[] dca)
    {
        int i,j;
        
        Set<Data>[][] s=(HashSet<Data>[][])new HashSet[var+1][var+1];//everything is 0 indexed
        //initializating HashSet
        for(i=0;i<=var;i++)
            for(j=0;j<=var;j++)
                s[i][j]=new HashSet<>();
        
        // entering data in first(s[0][]) column of s
        for(i=0;i<n;i++)
        {
            String binary=Integer.toBinaryString(a[i]);
            String ss="";
            for(j=0;j<var-binary.length();j++)
                ss=ss+"0";
            binary=ss+binary;
            s[0][Integer.bitCount(a[i])].add(new Data(binary, a[i]));
        }
        
        //filling all the columns of s based on already filled first column of s
        for(i=0;i<var;i++)//ckeck if it <= or <
            for(j=0;j<var;j++)
                for(Data d1:s[i][j])
                    for(Data d2:s[i][j+1])
                        if(d1.compatible(d2))
                        {
                            String chgbin=Data.commondigit(d1, d2);
                            d1.checked=true;
                            d2.checked=true;
                            s[i+1][j].add(new Data(chgbin, d1.dig,d2.dig));
                        }                  
                
        HashMap<String,Stack<Integer>> op=new HashMap<>();
        
        // filling op HashMap
        for(i=0;i<=var;i++)
            for(j=0;j<=var;j++)
                for(Data d:s[i][j])
                    if(!d.checked)
                        op.put(d.bineq, d.dig);
        
        // initializing op1 HashMap
        HashMap<Integer,Stack<String>> op1=new HashMap<>();
        for(int x:a)
            op1.put(x, new Stack<>());
        
        // filling op1 HashMap
        for(String ss:op.keySet())
            for(int y:op.get(ss))
            {
                Stack<String> temp=op1.get(y);
                temp.add(ss);//no need to add this temp back to op1 since any change in temp in reflected there(pass by reference)               
            }
        
        // method to remove don't care from op and op1
        if(dca.length!=0)
        {
            for(int t:dca)
            {
                for(String t1:op1.get(t))
                    op.get(t1).remove((Integer)t);
                op1.remove(t);
            }
        }
        
        HashSet<String> result=pitable(op, op1);
        
        if(option==1)
            return display(result);
        else
            return display1(result);
        
    }
    
    static String display1(HashSet<String> result)
    {
        if(result.size()==1)
        {
            String str="";
            String x="";
            for(String ss:result)
                str=ss;
            for(int i=0;i<str.length();i++)
                x+="*";
            if(x == null ? str == null : x.equals(str))
                return "0";
        }
        
        String sol="";
        for(String s:result)
        {
            sol+="(";
            int x=65;
            for(int i=0;i<s.length();i++)
            {
                if(s.charAt(i)=='*')
                {
                    x++;
                    continue;
                }
                if(s.charAt(i)=='1')
                {
                    sol+=(char)x++ +"'+ ";
                }
                else
                {
                    sol+=(char)x++ +"+ ";
                }
            }
            sol=sol.substring(0, sol.length()-2)+")";//sol+="\b\b)";
        }
        return sol;
    }
    
    static int getnovar(int max)
    {
        return 32-Integer.numberOfLeadingZeros(max);
    }
    
    static String display(HashSet<String> result)
    {
        if(result.size()==1)
        {
            String str="";
            String x="";
            for(String ss:result)
                str=ss;
            for(int i=0;i<str.length();i++)
                x+="*";
            if(x == null ? str == null : x.equals(str))
                return "1";
        }
        
        String sol="";
        for(String s:result)
        {
            int x=65;
            for(int i=0;i<s.length();i++)
            {
                if(s.charAt(i)=='*')
                {
                    x++;
                    continue;
                }
                if(s.charAt(i)=='1')
                {
                    sol+=(char)x++;
                }
                else
                {
                    sol+=(char)x++ +"'";
                }
            }
            sol+=" + ";
        }
        sol=sol.substring(0, sol.length()-2);
        return sol;
    }
    
    static HashSet<String> pitable(HashMap<String,Stack<Integer>> o,HashMap<Integer,Stack<String>> o1)
    {
        HashSet<String> ans=new HashSet<>();
        
        //checking epi and storing them in ans
        for(int i:o1.keySet())
            if(o1.get(i).size()==1)
                ans.add(o1.get(i).get(0));
         
        //removing elements corresponding to epi which is stored in ans
        for(String temp:ans)
        {
            Stack<TempData> tempstr=new Stack<>();
            for(int j:o.get(temp))
                {
                    for(String tmp:o1.get(j))
                    {
                        tempstr.add(new TempData(tmp, j));//storing elements to remove. can't remove here due to concurrentModificationException
                    }
                    o1.remove(j);
                }
            for(TempData td:tempstr)
                o.get(td.s).remove((Integer)td.i);
            o.remove(temp);            
        }
        
        //checking for any empty rows after removing elements corresponding to epi
        Stack<String> remove=new Stack<>();
        for(String st:o.keySet())
        {
            if(o.get(st).isEmpty())
                remove.add(st);
        }
        //removing empty rows(if any)
        for(String st:remove)
            o.remove(st);
        
        if(o.isEmpty())
            return ans;
        
        //looking for dominated rows and storing them in elerow
        Stack<String> elerow=new Stack<>();
        boolean[] b=new boolean[o.size()];
        int id1=-1,id2;
        for(String temp:o.keySet())
        {
            id1++;
            id2=-1;
            if(b[id1])
                continue;
            for(String temp1:o.keySet())
            {
                id2++;
                if(temp.equals(temp1) || b[id2])
                    continue;
                if(isdominated(o.get(temp), o.get(temp1)))//first argument is dominating or is equal
                {
                    elerow.add(temp1);
                    b[id2]=true;
                }
            }
        }
        
        //looking for dominating column and storing them in elecol
        Stack<Integer> elecol=new Stack<>();
        b=new boolean[o1.size()];
        id1=-1;
        for(int temp:o1.keySet())
        {
            id1++;
            id2=-1;
            if(b[id1])
                continue;
            for(int temp1:o1.keySet())
            {
                id2++;
                if(temp==temp1 || b[id2])
                    continue;
                if(isdominating(o1.get(temp), o1.get(temp1)))//first argument is dominated or is equal
                {
                    elecol.add(temp1);
                    b[id2]=true;
                }
            }
        }
        
        //removing dominated rows
        for(String temp:elerow)
        {
            for(int t:o.get(temp))
                o1.get(t).remove(temp);
            o.remove(temp);
        }
        //removing dominating columns  
        for(Integer temp:elecol)
        {
            for(String t:o1.get(temp))
                o.get(t).remove(temp);
            o1.remove(temp);
        }
        
        //recursively checking epi in remaining table
        HashSet<String> res=pitable(o, o1);
        
        //storing recursively epi found in current set of epi
        for(String temp:res)
            ans.add(temp);
        
        return ans;
    }
    
    static boolean isdominated(Stack<Integer> a,Stack<Integer> b)
    {
        if(a.size()<b.size())
            return false;
        int[] a1=new int[a.size()];
        int i=0;
        for(int t:a)
            a1[i++]=t;
        Arrays.sort(a1);
        for(int e:b)
            if(Arrays.binarySearch(a1, e)<0)
                return false;
        return true;
    }
    
    static boolean isdominating(Stack<String> a,Stack<String> b)
    {
        if(a.size()>b.size())
            return false;
        
        String[] b1=new String[b.size()];
        int i=0;
        for(String t:b)
            b1[i++]=t;
        
        Arrays.sort(b1);
        for(String t:a)
            if(Arrays.binarySearch(b1, t)<0)
                return false;
        return true;
    }
    
    static class Data
    {
        String bineq;
        Stack<Integer> dig=new Stack<>();
        boolean checked;
        
        Data(String bineq,int d)
        {
            this.bineq=bineq;
            dig.add(d);
            checked=false;
        }
        
        Data(String bineq,Stack<Integer> a,Stack<Integer> b)
        {
            this.bineq=bineq;
            for(int i:a)
                dig.add(i);
            for(int i:b)
                dig.add(i);
        }
        
       /* @Override
        public boolean equals(Object o)
        {
            return (o instanceof Data) && ((Data)o).bineq.equals(this.bineq);
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 71 * hash + Objects.hashCode(this.bineq);
            return hash;
        }*/
        
        static String commondigit(Data d1,Data d2)
        {
            int i;
            for(i=0;i<d1.bineq.length();i++)
            {
                if(d1.bineq.charAt(i)!=d2.bineq.charAt(i))
                    break;
            }   
            StringBuffer temp=new StringBuffer(d1.bineq);
            temp.setCharAt(i, '*');
            return new String(temp);
        }
        
        boolean compatible(Data d2)
        {
            int k=0;
            for(int i=0;i<this.bineq.length();i++)
            {
                if(this.bineq.charAt(i)!=d2.bineq.charAt(i))
                    k++;
            }
            return k==1;            
        }
    }
    
    static  class TempData
    {
        String s;
        int i;

        public TempData(String s, int i) {
            this.s = s;
            this.i = i;
        }
        
    }
    
    /**************************************************************************************************/
    /**************************************************************************************************/
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QMcCluskey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QMcCluskey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QMcCluskey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QMcCluskey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QMcCluskey().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
